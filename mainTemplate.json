{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "byolOrHourly": {
      "type": "string",
      "defaultValue": "hourly",
      "allowedValues": [ "hourly", "byol" ],
      "metadata": {
        "description": "The number of Web Application Firewalls that will be deployed in front of your application."
      }
    },
    "instanceType": {
      "type": "string",
      "allowedValues": [
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_F4",
        "Standard_F8"
      ],
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "imageName": {
      "allowedValues": [
        "good",
        "better",
        "best"
      ],
      "defaultValue": "good",
      "metadata": {
        "description": "F5 SKU(IMAGE) to Deploy, only relevant for hourly billing."
      },
      "type": "string"
    },
    "licensedBandwidth": {
      "type": "string",
      "defaultValue": "200m",
      "metadata": {
        "description": "The VM image to use for this deployment, only relevant for hourly billing."
      },
      "allowedValues": [
        "1g",
        "25m",
        "200m"
      ]
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name to login to the Web Application Firewall."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password to login to the Web Application Firewall."
      }
    },
    "publicIPName": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS prefix name for the Public IP used to access the BIG-IP for management access."
      }
    },
    "licenseKey": {
      "type": "string",
      "defaultValue": "NOT_SPECIFIED",
      "metadata": {
        "description": "The license token is required if deploying an F5 BYOL instance, (if applicable)."
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [ "new", "existing" ],
      "metadata": {
        "description": "New or Existing Virtual Network"
      }
    },
    "vnetExistingRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Enter the name of the resource group where the existing virtual network resides - (if using an existing virtual network)"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "VNET",
      "metadata": {
        "description": "Specify the virtual network name - (if using an existing virtual network)."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "Specify the virtual network address space - (if using an existing virtual network)."
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "external",
      "metadata": {
        "description": "Specify the virtual subnet name wher the BIG-IP will reside - (if using an existing virtual network)."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.1.0/24",
      "metadata": {
        "description": "Specify the virtual subnet address space - (if using an existing virtual network)."
      }
    },
    "restrictedSrcAddress": {
      "type": "string",
      "defaultValue": "*",
      "metadata": {
        "description": "Optional - Specify source address range for mgmt access. For example 10.23.105.0/24  or 206.124.129.56/32"
      }
    },
    "tunnelType": {
      "type": "string",
      "defaultValue": "Route-Based",
      "allowedValues": [ "Route-Based", "Policy-Based" ],
      "metadata": {
        "description": "Select either route-based or policy-based IPsec tunnel."
      }
    },
    "remoteEndPt": {
      "type": "string",
      "defaultValue": "0.0.0.0",
      "metadata": {
        "description": "The remote IPsec tunnel endpoint; must be reachable"
      }
    },
    "presharedKey": {
      "type": "string",
      "defaultValue": "CeKrEtMe",
      "metadata": {
        "description": "Enter the secret preshared key"
      }
    },
    "authStrength1": {
      "type": "string",
      "allowedValues": [ "SHA-1", "SHA-256" ],
      "defaultValue": "SHA-1",
      "metadata": {
        "description": "Select the Phase I authentication strength"
      }
    },
    "encryptStrength1": {
      "type": "string",
      "defaultValue": "AES-256",
      "allowedValues": [ "3DES", "AES-128", "AES-256" ],
      "metadata": {
        "description": "Select the Phase I encryption strength"
      }
    },
    "authStrength2": {
      "type": "string",
      "defaultValue": "SHA-1",
      "allowedValues": [ "SHA-1", "SHA-256" ],
      "metadata": {
        "description": "Select the Phase II authentication strength"
      }
    },
    "encryptStrength2": {
      "type": "string",
      "defaultValue": "AES-256",
      "allowedValues": [ "3DES", "AES-128", "AES-256" ],
      "metadata": {
        "description": "Select the Phase II encryption strength"
      }
    },
    "destNet": {
      "type": "string",
      "defaultValue": "0.0.0.0",
      "metadata": {
        "description": "Enter the destination network address space"
      }
    },
    "destMask": {
      "type": "string",
      "defaultValue": "0.0.0.0",
      "metadata": {
        "description": "Enter the destination network mask."
      }
    },
    "intTunnelAddr": {
      "type": "string",
      "defaultValue": "10.254.254.1",
      "metadata": {
        "description": "Required if deployng route-based tunnel. - NOTE: This address must reside on a unique address space"
      }
    },
    "intTunnelMask": {
      "type": "string",
      "defaultValue": "255.255.255.0",
      "metadata": {
        "description": "Required if deployng route-based tunnel."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "bigIpVersion": "latest",
    "baseUrl": "https://raw.githubusercontent.com/gregcoward/IPsec-Endpoint/master",
    "newStorageAccountName": "[concat(uniquestring(concat(resourceGroup().id, 'st')), 'st')]",
    "diagStorageAccountName": "[concat(uniquestring(concat(resourceGroup().id, 'diag')), 'diag')]",
    "f5NamePrefix": "[concat(parameters('publicIpName'),'-bigip')]",
    "nsgName": "[concat(parameters('publicIpName'),'-nsg')]",
    "apiVersionCompute": "2016-03-30",
    "apiVersionNetwork": "2015-06-15",
    "apiVersionStorage": "2015-06-15",
    "apiVersionTemplate": "2015-01-01",
    "linkTemplateApiVersion": "2015-01-01",
    "vnetLink": "[concat(variables('baseUrl'), '/', parameters('vnetNewOrExisting'),'vnet.json')]",
    "bigipLink": "[concat(variables('baseUrl'), '/bigip-',parameters('byolOrhourly'),'.json')]",
    "bigipNamePrefix": "bigip",
    "subPieces": "[split(parameters('subnetAddressPrefix'), '/')]",
    "subPart": "[variables('subPieces')[1]]",
    "subnetMask": {
      "16": {
        "mask": "255.255.0.0"
      },
      "17": {
        "mask": "255.255.128.0"
      },
      "18": {
        "storageAccountType": "255.255.192.0"
      },
      "19": {
        "mask": "255.255.224.0"
      },
      "20": {
        "mask": "255.255.240.0"
      },
      "21": {
        "storageAccountType": "255.255.248.0"
      },
      "22": {
        "mask": "255.255.252.0"
      },
      "23": {
        "mask": "255.255.254.0"
      },
      "24": {
        "storageAccountType": "255.255.255.0"
      },
      "25": {
        "mask": "255.255.255.128"
      },
      "26": {
        "mask": "255.255.255.192"
      },
      "27": {
        "storageAccountType": "255.255.255.224"
      },
      "28": {
        "mask": "255.255.255.240"
      },
      "29": {
        "storageAccountType": "255.255.255.248"
      },
      "30": {
        "mask": "255.255.255.252"
      }
    },
    "publicIPName": "[concat(parameters('publicIPName'),'-ip')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "nicNamePrefix": "[concat(parameters('publicIpName'),'-nic')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(parameters('publicIpName'),'-nsg'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "publicIpId": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "singleQuote": "'",
    "instanceTypeMap": {
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "iappUrl": "[concat(variables('baseUrl'), '/f5.ipsec.endpoint.tmpl')]",
    "runScriptsUrl": "[concat(variables('baseUrl'), '/runScripts.js')]",
    "scriptName": "IPsecEndptDeploy.sh",
    "scriptLoc": "[concat(variables('baseUrl'), '/', variables('scriptName'))]",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 489d460d2e5fcd401ce12f19b1d753a6bee30483cd0bf2b7548b7f8fe3caf5b727af96f013733cbd08b0c109e0cf535a29288d473b84cc834369204d5be5edc9\n            set hashes(f5-cloud-libs-aws.tar.gz) 0b602d069a6647e8268c7afc5201259058c4df545cdee5212bf1f6c2d24b11421201282c11e047b1df9b144a012312de45a07fcf28bd0d8cd3d3a86698774925\n            set hashes(f5-cloud-libs-azure.tar.gz) 16d2ce2086883ed5b47a3ba4e79541fd1a4bb64513222cf3a459297c2474d0bfc71a161ba2b8571707e1a6b273badaaf2c847993d0e60a4b52cd8c62cb03aba6\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 4db3176b45913a5e7ccf42ab9c7ac9d7de115cdbd030b9e735946f92456b6eb433087ed0e98ac4981c76d475cd38f4de49cd98c063e13d50328a270e5b3daa4a\n            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature prKQi8FeX98kCcFaMwIdwgYADdAjZo6iNTnnckguwe5IVysTEVe4vR2HPLJlDzU25dU17sQvDNIX52K0VYN4LEkAuSMeMTmr2LnlRWcGEJ4YUo9lKMdKzMzJaznlScwaR4P5mEdJC0ygq8jinOIlkauLbqmAElNtxWpb+XLnR2R83vMl/y9/LGxCxrvqE3ZuXvyuKqpAlhS+AN5ZQBDFvlTgQi52KJWpw+3i7oalz5dsjbAs2gRARtZ57Pa8OD5Oz54Q1UDxuzPVNH+CY4vt93JKmduMBsT3F41RUFDmRzosjmBY/Ic9O7oLVlKwOusDeqqqlfOM5CxcVMXwB3oxxQ==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit\nfi\necho loaded verifyHash\necho verifying f5-cloud-libs.tar.gz\n/usr/bin/tmsh run cli script verifyHash /config/cloud/f5-cloud-libs.tar.gz\nif [ $? != 0 ]; then\necho f5-cloud-libs.tar.gz is not valid\nexit\nfi\necho verified f5-cloud-libs.tar.gz\necho expanding f5-cloud-libs.tar.gz\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
    "f5CloudLibsTag": "v2.3.0", 
    "f5CloudLibsTagUrl": "[concat(variables('baseUrl'),'/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
    "commandArgs": "[concat(' -i ',parameters('tunnelType'),' -p ', parameters('remoteEndPt'),' -s ', parameters('presharedKey'),' -e ', parameters('authStrength1'),' -c ', parameters('encryptStrength1'),' -f ', parameters('authStrength2'),' -y ', parameters('encryptStrength2'),' -o ', parameters('destNet'),' -u ', parameters('destMask'),' -t ', parameters('intTunnelAddr'),' -d ', parameters('intTunnelMask'),' -x ', '255.255.255.0')]"
  },
  "resources": [
    {
      "name": "[variables('diagStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "apiVersion": "[variables('apiVersionStorage')]",
      "properties": {
        "accountType": "[variables('instanceTypeMap')[parameters('instanceType')].storageAccountType]"
      }
    },
    {
      "name": "[variables('newStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "apiVersion": "[variables('apiVersionStorage')]",
      "properties": {
        "accountType": "[variables('instanceTypeMap')[parameters('instanceType')].storageAccountType]"
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('publicIPName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NetworkSecurityGroup"
      },
      "properties": {
        "securityRules": [
          {
            "name": "mgmt_allow_8443",
            "properties": {
              "description": "",
              "priority": 101,
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8443",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          },
          {
            "name": "ssh_allow_22",
            "properties": {
              "description": "",
              "priority": 102,
              "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          },
          {
            "name": "ipsec_endpt_allow_all",
            "properties": {
              "description": "",
              "priority": 103,
              "sourceAddressPrefix": "[concat(parameters('remoteEndPt'),'/32')]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "*",
              "protocol": "TCP",
              "direction": "Inbound",
              "access": "Allow"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-01-01",
      "name": "virtualNetworkTemplate",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('vnetLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "apiVersionNetwork": {
            "value": "[variables('apiVersionNetwork')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          },
          "vnetExistingRGName": {
            "value": "[parameters('vnetExistingRGName')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('linkTemplateApiVersion')]",
      "name": "bigipDeployTemplate",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "virtualNetworkTemplate"
      ],
      "properties": {
        "mode": "incremental",
        "templateLink": {
          "uri": "[variables('bigipLink')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersionCompute": { "value": "[variables('apiVersionCompute')]" },
          "apiVersionNetwork": { "value": "[variables('apiVersionNetwork')]" },
          "location": { "value": "[variables('location')]" },
          "subnetId": { "value": "[concat(reference('virtualNetworkTemplate').outputs.vnetID.value,'/subnets/',parameters('subnetName'))]" },
          "bigipNamePrefix": { "value": "[variables('bigipNamePrefix')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "instanceType": { "value": "[parameters('instanceType')]" },
          "nsgId": { "value": "[variables('nsgId')]" },
          "nicNamePrefix": { "value": "[variables('nicNamePrefix')]" },
          "newStorageAccountName": { "value": "[variables('newStorageAccountName')]" },
          "runScriptsUrl": { "value": "[variables('runScriptsUrl')]" },
          "iappUrl": { "value": "[variables('iappUrl')]" },
          "f5CloudLibsTagUrl": { "value": "[variables('f5CloudLibsTagUrl')]" },
          "f5CloudLibsTag": { "value": "[variables('f5CloudLibsTag')]" },
          "installCloudLibs": { "value": "[variables('installCloudLibs')]" },
          "verifyHash": { "value": "[variables('verifyHash')]" },
          "singleQuote": { "value": "[variables('singleQuote')]" },
          "commandArgs": { "value": "[variables('commandArgs')]" },
          "scriptLoc": { "value": "[variables('scriptLoc')]" },
          "imageName": { "value": "[parameters('imageName')]" },
          "licensedBandwidth": { "value": "[parameters('licensedBandwidth')]" },
          "publicIpId": { "value": "[variables('publicIpId')]" }
          
        }
      }
    }

  ],
    "outputs": {}
  }
